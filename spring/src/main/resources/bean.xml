<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

      <!--把对象的创建交给spring管理-->
<!--      spring对bean的管理细节
          1.创建bean的三种方式
          2.bean对象的作用范围
          3.bean对象的生命周期
-->
<!--      创建bean的三种方式-->
<!--      第一种方式：使用默认构造函数创建
                  在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时
                  采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建
-->
      <bean id="accountServer" class="service.impl.accountServerImpl">
            <constructor-arg name="name" value="test"></constructor-arg>
            <constructor-arg name="age" value="18"></constructor-arg>
            <constructor-arg name="birthday" ref="now"></constructor-arg>
      </bean>
      <bean id="now" class="java.util.Date"></bean>

<!--          第二种方式：使用普通工厂的方法创建对象（使用某个类中的方法创建对象并存入spring容器）-->
      <bean id="instanceFactory" class="factory.factory"></bean>
      <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>

<!--          第三种方式，使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象并存入spring容器）-->
      <bean id="accountStaticService" class="factory.Staticfactory" factory-method="getAccountService"></bean>
<!--      bean的作用范围调整
            bean标签的scope属性 ，用于指定bean的作用范围
            取值：1。singleton 单例（默认值）
                 2。prototype 多例的
                 3。request 作用于web应用的请求范围
                 4。session  作用于web应用的会话范围
                 5。global-session 作用于集群环境的会话范围（全局会话范围），当不是集群时，就是session；
-->
      <bean id="accountServerScope" class="service.impl.accountServerImpl" scope="prototype"></bean>
<!--      bean对象的生命周期
                  单例对象
                        出生：当容器创建时，对象出生
                        活着：容器还在，对象就在
                        死亡：容器消亡，对象消亡
                        总结：单例和容器共生命周期
                  多例对象
                        出生：当我们使用对象是spring框架为我们创建
                        活着：在使用过程中就一直活着
                        死亡：当对象长时间不用且没有别的对象引用时，由java的垃圾回收器回收
-->
      <bean id="accountServerScopeMethod" class="service.impl.accountServerImpl" scope="singleton"
      init-method="init"  destroy-method="destroy"  ></bean>
</beans>